{"version":3,"sources":["serviceWorker.js","store/storeFactory.js","store/constant.js","Component/Button/Button.js","App.js","AppContainer.js","store/actions.js","store/reducer.js","store/sagas/sagas.js","index.js"],"names":["Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","store","rootReducer","sagaFunction","creatingstore","createStore","applyMiddleware","run","constant","INC","DEC","RESET","INC_SAGA","DEC_SAGA","RESET_SAGA","Button","props","ButtonStyles","styled","div","withConfig","displayName","componentId","primary","react_default","a","createElement","onClick","buttonText","defaultProps","APP","Container","CounterDisplay","_props$action","action","decrement","increment","reset","Fragment","counter","Component_Button_Button","AppContainer","connect","state","Object","objectSpread","dispatcher","type","C","App","combineReducers","arguments","length","undefined","asyncIncrement","asyncDecrement","asyncReset","rootSaga","regenerator_default","wrap","_context","prev","next","delay","put","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","takeLatest","_marked4","storeFactory","subscribe","console","log","getState","ReactDOM","render","es","src_AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29e29b4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import{createStore,applyMiddleware} from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n// A custom function  that takes the rootreducer and sagaRoute Reducer as input and create a store and run the Saga .\r\nconst store = (rootReducer,sagaFunction)=>{\r\n\tconst creatingstore = createStore(\r\n\t\trootReducer,\r\n\t\tapplyMiddleware(sagaMiddleware)\r\n\t); // creating the redux store.\r\n\tsagaMiddleware.run(sagaFunction); // run the redux saga\r\n\treturn creatingstore;\r\n};\r\n\r\nexport default store;\r\n","// A file where all the constant is saved .\nexport default {\n\tINC: \"INCREMENT\",\n\tDEC: \"DECREMENT\",\n\tRESET:\"RESET\",\n\tINC_SAGA: \"INCREMENT_SAGA\",\n\tDEC_SAGA: \"DECREMENT_SAGA\",\n\tRESET_SAGA:\"RESET_SAGA\"\n};\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport PropTypes from 'prop-types';\nconst Button = (props)=>{\n\tconst ButtonStyles = styled.div`\n\t    background: ${props => props.primary ? \"palevioletred\" : \"white\"};\n\t    color: ${props => !props.primary ? \"palevioletred\" : \"white\"};\n        display: inline-flex;\n        font-size: 1em;\n        margin: .30em;\n        padding: 0.25em 1em;\n        border: 2px solid palevioletred;\n        border-radius: 3px;\n        :hover{\n          background:  ${props => !props.primary ? \"palevioletred\" : \"white\"};;\n          color: ${props => props.primary ? \"palevioletred\" : \"white\"};\n          cursor:pointer;\n        }\n        :active{\n          background:  ${props => props.primary ? \"#cf70db\" : \"white\"};;\n          color: ${props => !props.primary ? \"#cf70db\" : \"white\"};\n        }\n\t`;\n\t\n\treturn(\n\t\t<ButtonStyles onClick={props.onClick} primary={props.primary}>{props.buttonText}</ButtonStyles>\n\t);\n};\nButton.defaultProps={\n\tprimary: false\n};\nButton.propTypes={\n\tonClick: PropTypes.func.isRequired,\n\tprimary: PropTypes.bool,\n\tbuttonText: PropTypes.string.isRequired\n};\nexport default Button;\n","import React from 'react';\r\nimport Button from \"./Component/Button/Button\";\r\nimport styled from \"styled-components/macro\";\r\n\r\nconst APP = (props)=>{\r\n    const Container = styled.div`\r\n      display:flex;\r\n      flex-direction:column;\r\n      justify-content: center;\r\n      align-items:center;\r\n      margin-top: 120px;\r\n    `;\r\n    const CounterDisplay = styled.div`\r\n      border: 2px solid palevioletred;\r\n      margin: 0.15em;\r\n      width: 150px;\r\n      text-align:center;\r\n      padding: 0.5em;\r\n      border-radius: 2px;\r\n      font-size: 20px;\r\n      font-weight:bold;\r\n    `;\r\n    const {decrement,increment,reset} =props.action;\r\n    return (\r\n        <React.Fragment >\r\n            <Container>\r\n                <CounterDisplay>{props.counter}</CounterDisplay>\r\n                <Button onClick={increment} buttonText=\"Increment\" primary />\r\n                <Button onClick={decrement} buttonText=\"Decrement\" primary/>\r\n                <Button onClick={reset} buttonText=\"Reset\" />\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default APP;\r\n","import {connect} from \"react-redux\";\r\nimport {DECREMENT_ACTION, INCREMENT_ACTION,RESET_ACTION} from \"./store/actions\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = (state)=>{\r\n\treturn{\r\n\t\t...state\r\n\t}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatcher)=>{\r\n  return{\r\n  \taction:{\r\n\t    increment: ()=> dispatcher(INCREMENT_ACTION()),\r\n\t    decrement: ()=> dispatcher(DECREMENT_ACTION()),\r\n\t    reset:()=> dispatcher(RESET_ACTION())\r\n    }\r\n  }\r\n};\r\n\r\nconst AppContainer = connect(mapStateToProps,mapDispatchToProps)(App);\r\nexport default AppContainer;\r\n","import C from \"./constant\";\n// INCREMENT_ACTION -> Action to increment the counter\nexport const INCREMENT_ACTION = ()=>{\n\treturn{\n\t\ttype: C.INC_SAGA,\n\t};\n};\n// DECREMENT_ACTION -> Action to increment the counter\nexport const DECREMENT_ACTION=()=>{\n\treturn{\n\t\ttype: C.DEC_SAGA,\n\t}\n};\n// RESET_ACTION -> Action to reset the counter\nexport const RESET_ACTION =()=>{\n return{\n \ttype: C.RESET_SAGA\n }\n};\n","import {combineReducers} from \"redux\";\r\nimport C from \"./constant\";\r\n\r\nexport const counter = (state=0,action)=>{\r\n\tswitch(action.type){\r\n\t\tcase C.INC:\r\n\t\t\treturn state+1;\r\n\t\tcase C.DEC:\r\n\t\t\treturn state-1;\r\n\t\tcase C.RESET:\r\n\t\t\treturn 0;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t\r\n\t}\r\n};\r\n\r\nexport const rootReducer =  combineReducers({\r\n\tcounter\r\n});\r\n\r\n","import {delay} from \"q\";\nimport {takeLatest,put} from \"redux-saga/effects\";\nimport C from \"../constant\";\n\nfunction* asyncIncrement() {\n\tyield delay(1000);\n\tyield put({type:C.INC})\n}\n\nfunction* asyncDecrement(){\n\tyield delay(1000);\n\tyield put({type:C.DEC});\n}\n\nfunction* asyncReset() {\n\tyield delay(1000);\n\tyield put({type:C.RESET})\n}\n//rootSaga() => SAGA Watcher\nexport function* rootSaga(){\n\tyield takeLatest(C.INC_SAGA,asyncIncrement); // increment the number\n\tyield takeLatest(C.DEC_SAGA,asyncDecrement); // Decrement the number\n\tyield takeLatest(C.RESET_SAGA,asyncReset); // Reset the number\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport storeFactory from \"./store/storeFactory\";\r\nimport AppContainer from \"./AppContainer\";\r\nimport {rootReducer} from \"./store/reducer\";\r\nimport {rootSaga} from \"./store/sagas/sagas\";\r\nconst store = storeFactory(rootReducer,rootSaga);\r\nstore.subscribe(\r\n\t()=>console.log(store,store.getState())\r\n);\r\nwindow.store= store;\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<AppContainer />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}